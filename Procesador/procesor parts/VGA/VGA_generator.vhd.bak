library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

library altera_mf;
use altera_mf.all;

entity VGA_generator is
	port(
		clock_25MHz	: in 	std_logic;
		data			: in 	std_logic_vector(3 downto 0);
		red:			: out	std_logic_vector(3 downto 0);
		green			: out	std_logic_vector(3 downto 0);
		blue			: out std_logic_vector(3 downto 0);
		Hsync			: out std_logic;
		Vsync			: out std_logic	
	);
end VGA_generator

architecture behaviour of VGA_generator is

signal rojo, verde, azul		: std_logic := '0';
signal Hsync_aux,Vsync_aux		: std_logic := '0';
signal video_on, video_on_v, video_on_h,pixel_out : std_logic;
signal h_count, v_count			: unsigned (9 downto 0);
signal pixel_columna, pixel_linea : unsigned (9 downto 0); 
begin

	video_on <= video_on_h AND video_on_v;
	
	
	Vga_protocol process
	begin
		if rising_edge(clock_25MHz)
		
			if (h_count = 799) then
				h_count <= "0000000000";
			else
				h_count <= h_count + 1;
			end if;
			
			if (h_count <= 755) and (h_count => 659) then
				Hsync_aux <= '0';
			else
				Hsync_aux <= '1';
			end if;
			
			if (v_count => 524) and (h_count => 699) then
				v_count <= "0000000000";
			else
				v_count <= v_count + 1;
			end if;
			
			if (v_count => 493) and ( v_coun <= 494) then
				Vsync_aux <= '0';
			else 
				Vsync_aux <= '1';
			end if;
			
			if (h_count <= 639) then
				video_on_h <= '1';
				pixel_columna <= h_count;
			else 
				video_on_h <= '0';
			
			if (v_count <= 479) then
				video_on_v <= '1';
				pixel_linea <= v_count;
			else
				video_on_v <= '0';
			end if;
			
			rojo	<= pixel_out and video_on;
			verde <= pixel_out and video_on;
			azul	<= pixel_out and video_on;
			
			red	<= "00" 	& rojo	& rojo;
			green	<= "00" 	& verde	& verde;
			blue	<= "00" 	& azul 	& azul;
			
			hsync <= Hsync_aux;
			vsync <= Vsync_aux;
	end process;
	
end behaviour;